<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Jan Weyler</title>
        <link>https://jaweyl.github.io/jaweyl/posts/</link>
        <description>Recent content in Posts on Jan Weyler</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Sat, 26 Dec 2020 16:03:51 +0100</lastBuildDate>
        <atom:link href="https://jaweyl.github.io/jaweyl/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>How to make a static website</title>
            <link>https://jaweyl.github.io/jaweyl/posts/2020/12/how-to-make-a-static-website/</link>
            <pubDate>Sat, 26 Dec 2020 16:03:51 +0100</pubDate>
            
            <guid>https://jaweyl.github.io/jaweyl/posts/2020/12/how-to-make-a-static-website/</guid>
            <description>Introduction I this article I&amp;rsquo;ll explain how I build my first website using the static site generator Hugo.
My main goal was to build a website were I can write articles about topics I&amp;rsquo;m interested in. First let&amp;rsquo;s talk about some requirements I had in the first place:
 Write articles with a markup language (Markdown) Minimalistic, fast and good looking Inexpensive  In general a static site generator builds a webpage which is delivered to the user exactly as it is stored.</description>
            <content type="html"><![CDATA[<h1 id="introduction">Introduction</h1>
<p>I this article I&rsquo;ll explain how I build my first website using the <em>static site generator</em> <a href="https://gohugo.io"><strong>Hugo</strong></a>.</p>
<p>My main goal was to build a website were I can write articles about topics I&rsquo;m interested in. First let&rsquo;s talk about some requirements I had in the first place:</p>
<ul>
<li>Write articles with a markup language (<a href="https://en.wikipedia.org/wiki/Markdown">Markdown</a>)</li>
<li>Minimalistic, fast and good looking</li>
<li>Inexpensive</li>
</ul>
<p>In general a <em>static site generator</em> builds a webpage which is delivered to the user exactly as it is stored. In contrast, a <em>dynamic web page</em> is generated by a web application and may have a different visual appearance for different users (e.g. Twitter).</p>
<p>Thus, the workflow for <em>static webpages</em> is as following:</p>
<ol>
<li>Write content</li>
<li>Generate webpage</li>
<li>Upload to server</li>
<li>Go back to 1.</li>
</ol>
<p>The advantage of a <em>static website</em> is that it is precompiled, therefore it is fast, secure and less complex than <em>dynamic web pages</em>.</p>
<p><a href="https://gohugo.io">Hugo</a> is one of many  <em>static site generators</em> which offers many themes and tutorials as well as a good documentation.</p>
<h1 id="getting-started">Getting Started</h1>
<h2 id="1-install-hugo">1. Install Hugo</h2>
<p>First, we install hugo on our device. In this case we are using <em>Homebrew</em> which is package manager for Mac.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">brew install hugo
</code></pre></div><h2 id="2-setup-your-hugo-project">2. Setup your Hugo project</h2>
<p>Second, we create a directory which will store all files which belong to our website by calling <code>hugo new site &lt;website-name&gt;</code>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">hugo new site example-hugo-site
cd example-hugo-site
git init
</code></pre></div><p>This command will create a couple of folders and most importantly a configuartion file called <em>config.toml</em>.</p>
<h2 id="3-select-a-theme">3. Select a theme</h2>
<p>In order to visualize the content of your webpage you will need a proper theme, e.g., <a href="https://github.com/rhazdon/hugo-theme-hello-friend-ng.git">Hello Friend NG</a>.</p>
<p>We add this theme to our Hugo project by calling the following commands:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">git clone https://github.com/rhazdon/hugo-theme-hello-friend-ng.git themes/hello-friend-ng
git submodule add https://github.com/rhazdon/hugo-theme-hello-friend-ng.git themes/hello-friend-ng
</code></pre></div><p>This theme contains an example site and a corresponding configuration file which we will use for our homepage by copying it to our project.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">cp -r ./themes/hello-friend-ng/exampleSite/* .
</code></pre></div><p>Now we just need to specify the folder which stores the theme itself by adapting the configuration file (<em>config.toml</em>.) as following:</p>
<pre><code class="language-config" data-lang="config">themesDir = &quot;themes&quot;
</code></pre><p>In this file you can also specify a lot of options like your name, title, &hellip;. Just have a look and do some experiments.</p>
<h2 id="4-create-new-posts">4. Create new posts</h2>
<p>In general all articles are save at <code>./content/posts</code>. In order to create a new article just run the following command:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">hugo new content/posts/first-post.md
</code></pre></div><p>This create a new post called <code>first-post.md</code>. However, by default a new post is flagged as a <em>draft</em> and therefore is not displayed. In case you want to publish an article just open the file and set the corresponding flag to <em>false</em>.</p>
<pre><code class="language-config" data-lang="config">---
title: &quot;First Post&quot;
date: 2020-12-26T17:44:38+01:00
draft: false
---
</code></pre><h2 id="5-make-your-website-public">5. Make your website public</h2>
<p>Everything we did so far is on your local machine. However, we want to make our website public by using
<em>GitHub Pages</em> - this is a service to host <em>static websites</em> on <em>GitHub</em>.</p>
<p>Just create a new repository (public) and add the remote branch to your local repository.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">git remote add origin git@github.com:JaWeyl/my-site.git
</code></pre></div><p>Next we need to make some changes to our configuration file in order to host our website on <em>GitHub</em> properly.</p>
<p>First, let&rsquo;s define the target folder of our compiled website in our configuration file as following:</p>
<pre><code class="language-config" data-lang="config">publishDir = &quot;docs&quot;
</code></pre><p>We also need to specify the url of our website which - by default - consists of your <em>GitHub</em> username and the name of your repository:</p>
<pre><code class="language-config" data-lang="config">baserul = &quot;https://jaweyl.github.io/my-site/&quot;
</code></pre><p>Now we also need to tell <em>GitHub</em> where the compiled version of our website lives s.t. it can be displayed.
This needs to be specified within the settings:</p>
<p><img src="/media/images/github-pages-settings.png" alt="Example image"></p>
<p>There is actually only the option to select the <code>docs</code> directory. This is also why we previously selected this directory as the output directory for our compiled website.</p>
<p>In the next step we can <strong>compile</strong> our hugo project to build the actual website.
<strong>Compiling</strong> is actually quite easy - we just need to run:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">hugo
</code></pre></div><p>in our project folder - that&rsquo;s it!</p>
<p>Now you should see some <em>.html</em> and <em>.css</em> files in the <code>docs</code> folder.</p>
<p>Finally, push your code to the remote repository and visit your own homepage!</p>
<p>Thanks to <a href="https://www.youtube.com/watch?v=3wkR8GyDODs">GeekLaunch</a> for an excellent tutorial about how to build a <em>static website</em>.</p>
]]></content>
        </item>
        
    </channel>
</rss>
